generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum LEVEL {
  USER
  ADMIN
}

enum ROLE {
  OWNER
  EDITOR
  VIEWER
}

enum APPROVAL_STATUS {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String            @unique
  password        String
  avatar          String?           @default("default_avatar.png")
  level           LEVEL             @default(USER)
  managedDialects UserDialect[]
  reviewHistory   ApprovalHistory[]
}

model UserDialect {
  id        Int     @id @default(autoincrement())
  userId    Int
  dialectId Int
  role      ROLE
  user      User    @relation(fields: [userId], references: [id])
  dialect   Dialect @relation(fields: [dialectId], references: [id])

  @@unique([userId, dialectId])
}

model Dialect {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  introduction   String?
  longitude      String?
  latitude       String?
  pronunciations Pronunciation[]
  managers       UserDialect[]
  iterations     Iteration[]
}

model Character {
  codePoint      Int                @id
  chineseChar    String
  picture        String?
  pronunciations Pronunciation[]
  variants       CharacterVariant[] @relation("CharacterVariant")
}

model CharacterVariant {
  id                        Int       @id @default(autoincrement())
  baseCharacterCodePoint    Int
  variantCharacterCodePoint Int
  baseCharacter             Character @relation("CharacterVariant", fields: [baseCharacterCodePoint], references: [codePoint])

  @@unique([baseCharacterCodePoint, variantCharacterCodePoint])
}

model Pronunciation {
  id                 Int           @id @default(autoincrement())
  phonetic           String
  initials           String?
  finals             String?
  tone               String?
  dialectId          Int
  characterCodePoint Int
  dialect            Dialect       @relation(fields: [dialectId], references: [id], onDelete: Cascade)
  character          Character     @relation(fields: [characterCodePoint], references: [codePoint])
  explanations       Explanation[]
}

model Explanation {
  id                   Int           @id @default(autoincrement())
  description          String @db.Text
  wordFormation        String?
  sentenceConstruction String?
  pronunciationId      Int
  pronunciation        Pronunciation @relation(fields: [pronunciationId], references: [id], onDelete: Cascade)
}

model Iteration {
  id              Int               @id @default(autoincrement())
  dialectId       Int
  status          APPROVAL_STATUS   @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  closedAt        DateTime?
  dialect         Dialect           @relation(fields: [dialectId], references: [id])
  changes         Change[]
  ApprovalHistory ApprovalHistory[]
}

model Change {
  id          Int       @id @default(autoincrement())
  iterationId Int
  entityType  String
  entityId    Int
  fieldName   String
  oldValue    String?
  newValue    String?
  createdAt   DateTime  @default(now())
  iteration   Iteration @relation(fields: [iterationId], references: [id])

  @@index([iterationId])
}

model ApprovalHistory {
  id          Int             @id @default(autoincrement())
  userId      Int
  iterationId Int
  status      APPROVAL_STATUS
  reviewedAt  DateTime
  comment     String?
  user        User            @relation(fields: [userId], references: [id])
  iteration   Iteration       @relation(fields: [iterationId], references: [id])
}
